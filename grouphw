--Group Project 
--Brandon S, Stacey, Molly, Alison, Jamie Berger

--Drop tables plus cascade constraints
DROP TABLE email CASCADE CONSTRAINTS;
DROP TABLE dobirth CASCADE CONSTRAINTS;
DROP TABLE familyinfo CASCADE CONSTRAINTS;
DROP TABLE mbr CASCADE CONSTRAINTS;
DROP TABLE phone CASCADE CONSTRAINTS;    
DROP TABLE personphone CASCADE CONSTRAINTS; 
DROP TABLE address CASCADE CONSTRAINTS;
DROP TABLE personaddress CASCADE CONSTRAINTS; 
DROP TABLE person_org CASCADE CONSTRAINTS;
DROP TABLE org CASCADE CONSTRAINTS;
DROP TABLE authorized_individual CASCADE CONSTRAINTS;
DROP TABLE memberreleaseform CASCADE CONSTRAINTS;
DROP TABLE teacher CASCADE CONSTRAINTS;
DROP TABLE medical_history CASCADE CONSTRAINTS;
DROP TABLE lunch CASCADE CONSTRAINTS;
DROP TABLE hw CASCADE CONSTRAINTS;
DROP TABLE services CASCADE CONSTRAINTS;
DROP TABLE services_provided CASCADE CONSTRAINTS;
DROP TABLE services_used CASCADE CONSTRAINTS;
DROP TABLE allergy CASCADE CONSTRAINTS;

DROP TABLE person CASCADE CONSTRAINTS;


--Drop statments for Sequences


--The code below creates a table for Person where personid is the primary key
--Constraint for gender; M= Male, F= Female, O= Other
CREATE TABLE person(
  personid NUMBER(6) NOT NULL,
  lname    VARCHAR2(35) NOT NULL,
  fname    VARCHAR2(35) NOT NULL,
  mname    VARCHAR2 (35),
  gender   CHAR(1),
  CONSTRAINT persongender_cc CHECK (gender IN ('M','F','O')),
  CONSTRAINT personid_pk PRIMARY KEY (personid));
  
--The code below creates a table for Email where emailid is the primary key
CREATE TABLE email (
  personid NUMBER(6) NOT NULL,
  email_add VARCHAR2(35) NOT NULL,
  CONSTRAINT email_pk PRIMARY KEY (personid),
  CONSTRAINT email_fk FOREIGN KEY (personid) REFERENCES person (personid));

  
--The code below creates table for Authorized Individual where authorizedindid and memberid are the primary and foreign keys
--Check constraints are for emergency contact, authorized to pick up, head of the house hold and edit account information
--These constraints are all yes or no questions,so 'Y'= yes and n= 'N'
--Check constraint for relationship: 'P' = Parent, 'GP' = Grandparent, 'G' = Guardian, 'OR' = Other Relationship
CREATE TABLE authorized_individual (
  authorizedindid NUMBER(6) NOT NULL,
  memberid        NUMBER(6) NOT NULL,
  relationship    VARCHAR2(2) NOT NULL,
  orelationship   VARCHAR2(25),
  emg_cont        CHAR(1) NOT NULL,
  auth_pickup     CHAR(1) NOT NULL,
  headofhouse     CHAR(1) NOT NULL,
  edit_acct_info  CHAR(1) NOT NULL,
  CONSTRAINT authorized_relation_cc CHECK (relationship IN ('P', 'GP', 'G', 'OR')),
  CONSTRAINT authorized_emg_cont_cc CHECK (emg_cont IN ('Y', 'N')),
  CONSTRAINT authorized_individual_cc CHECK (auth_pickup IN ('Y', 'N')),
  CONSTRAINT authorized_headofhouse_cc CHECK (headofhouse IN ('Y', 'N')),
  CONSTRAINT authorized_edit_acct_info_cc CHECK (edit_acct_info IN ('Y', 'N')),
  CONSTRAINT authorizedmemberid_pk PRIMARY KEY (authorizedindid, memberid),
  CONSTRAINT authorizedindid_fk FOREIGN KEY (authorizedindid) REFERENCES person (personid),
  CONSTRAINT authorizedmemberid_fk FOREIGN KEY (memberid) REFERENCES person (personid));

--The code below creates table for Date of Birth where birthid is the primary key
CREATE TABLE dobirth (
  birthid   NUMBER (6) NOT NULL,
  dob       DATE NOT NULL,
  CONSTRAINT dobirth_pk PRIMARY KEY (birthid));

--The code below creates table for Family Information where famid is the primary key
CREATE TABLE familyinfo (
  famid     NUMBER (6) NOT NULL,
  famsize   NUMBER (20) NOT NULL,
  famincome NUMBER (10) NOT NULL,
  military  CHAR (1) NOT NULL,
  branch    VARCHAR2(25) NOT NULL,
  liveswith VARCHAR2 (2) NOT NULL,
  CONSTRAINT familyinfo_lives_cc CHECK (liveswith IN ('B', 'M', 'F', 'GP', 'G', 'R', 'FP')),
  CONSTRAINT familyinfo_pk PRIMARY KEY (famid));


--The code below creates table for Member where memberid is the primary key
--Check Constraint for ethnicity 'C'= Caucasian, 'AA' = African American, 'AI' = American Indian, 'AP' = Asian-Asian Pacific,
--'HP' = Hispanic-Latino, 'ME' = Multi-Ethnic, 'O'= Other
CREATE TABLE mbr (
  memberid    NUMBER (6) NOT NULL,
  ethnicty    VARCHAR2 (2),
  eth_other   VARCHAR2 (35),
  birthid     NUMBER(6) NOT NULL,
  famid       NUMBER(6) NOT NULL,
  CONSTRAINT mbr_ethnicty_cc CHECK (ethnicty IN ('C', 'AA','AI','AP','HP','ME','O')),
  CONSTRAINT mbr_memberid_pk PRIMARY KEY (memberid),
  CONSTRAINT mbr_memberid_fk FOREIGN KEY (memberid) REFERENCES person (PERSONID),
  CONSTRAINT mbr_birthid_fk FOREIGN KEY (birthid) REFERENCES dobirth (birthid),
  CONSTRAINT mbr_famid_fk FOREIGN KEY (famid) REFERENCES familyinfo (famid));

--The code below creates the Phone table where phoneid is the primary key. Where Phone Types: 'M'= Mobile, 'H'= Home, 'W' = Work
CREATE TABLE phone (
  phoneid NUMBER (6),
  pnumber NUMBER (10) NOT NULL,
  ptype  CHAR (1) NOT NULL,
  CONSTRAINT phone_ptype_cc CHECK ((ptype='M') OR (ptype='H') OR (ptype = 'W')),
  CONSTRAINT phone_phoneid_pk PRIMARY KEY (phoneid));

--The code below creates the Personphone table which is the associative table that connects phone and person where phonid and personid are the primary and foreign keys
CREATE TABLE personphone (
  personid NUMBER (6) NOT NULL,
  phoneid NUMBER (6) NOT NULL, 
  CONSTRAINT personphone_personid_fk FOREIGN KEY (personid) REFERENCES person (personid),
  CONSTRAINT personphone_phoneid_fk FOREIGN KEY (phoneid) REFERENCES phone (phoneid));

--The code below creates the Address table where addrid is the primary key
CREATE TABLE address (
  addrid NUMBER (6) NOT NULL,
  strt VARCHAR2 (35) NOT NULL,
  city VARCHAR2 (35) NOT NULL,
  ste CHAR (2) DEFAULT 'WI' NOT NULL,
  zipcode VARCHAR2 (10) NOT NULL,
  CONSTRAINT addr_addrid_pk PRIMARY KEY(addrid));

--The code below creates the Personaddress table which is the associative table that connects address and person 
--Where addrid and personid are the primary and foreign keys
CREATE TABLE personaddress (
  addrid NUMBER (5) NOT NULL, 
  personid NUMBER (5) NOT NULL,
  CONSTRAINT personaddr_peraddr_pk PRIMARY KEY (addrid,personid),
  CONSTRAINT personaddr_personid_fk FOREIGN KEY (personid) REFERENCES person (personid),
  CONSTRAINT personaddr_addrid_fk FOREIGN KEY (addrid) REFERENCES address (addrid));
  
-- The code below creates the table for Organization where org_id is the primary key
CREATE TABLE org (
  org_id  NUMBER(6) NOT NULL,
  org_name VARCHAR2(35) NOT NULL,
  CONSTRAINT org_org_id_pk PRIMARY KEY (org_id));

--The code below creates the table for Person_Org where org_id and personid are the primary and foreign keys
CREATE TABLE person_org (
  personid NUMBER(6) NOT NULL,
  org_id  NUMBER(6) NOT NULL,
  CONSTRAINT person_org_pk PRIMARY KEY (personid, org_id),
  CONSTRAINT person_org_person_fk FOREIGN KEY (personid) REFERENCES person (personid),
  CONSTRAINT person_org_org_fk FOREIGN KEY (org_id) REFERENCES org (org_id));

--The code below creates the table for Teacher where personid and teacherid are the primary and foreign keys
--The check constraint in this table to make sure they are entering a a valid school year
--'NA"= not in school 'PK'= preschool,'4K'= 4k, '5K'= 5k, '1'= 1st grade, '2'=2nd grade,'3'= 3rd grade,'4'= 4th grade,'5'= 5th grade,
--'6'= 6th grade,'7'= 7th grade,'8'= 8th grade,'FR'= Freshman,'SO'= Sophmore,'JR'= Junior,'SR'= Senior
CREATE TABLE teacher (
  personid NUMBER (6) NOT NULL,
  teacherid NUMBER (6) NOT NULL,
  schoolyear VARCHAR(2) NOT NULL,
  CONSTRAINT teacher_schoolyear_cc CHECK (schoolyear IN ('NA','PK','4K', '5K', '1', '2','3','4','5','6','7','8','FR','SO','JR','SR')),
  CONSTRAINT teacher_pk PRIMARY KEY (personid, teacherid),
  CONSTRAINT teacher_person_fk FOREIGN KEY (personid) REFERENCES person (personid),
  CONSTRAINT teacher_teacher_fk FOREIGN KEY (personid) REFERENCES person (personid));

--The code below creates the table for Member Release Form where memberid and authorized individualids are the primary and foreign keys
--Check constraints for liability, transportation, photo_video, academics, computer policy, and electronics "Y" = Yes, understood
--and "N" = No,did not understand
--Check constraint for computer access is "Y"= Yes, they have permission to access computers or "N" No, they do not give permission to access computers
--Check constraint for authorized to leave is "A"= Authorized to leave unescorted or "U" = Unauthorized to leave unescorted
CREATE TABLE memberreleaseform (
  memberid NUMBER (6) NOT NULL,
  authorizedindid NUMBER (6) NOT NULL,
  liability CHAR (1) DEFAULT 'Y' NOT NULL,
  transportation CHAR (1) DEFAULT 'Y' NOT NULL,
  photo_video CHAR (1) DEFAULT 'Y' NOT NULL,
  academics CHAR (1) DEFAULT 'Y' NOT NULL,
  computer_policy CHAR (1) DEFAULT 'Y' NOT NULL,
  computer_access CHAR (1) NOT NULL,
  leave_club CHAR (1) NOT NULL,
  electronics CHAR (1),
  memberdatesigned DATE NOT NULL,
  authorizedinddatesigned DATE NOT NULL,
  CONSTRAINT liability_CC CHECK (liability IN ('Y', 'N')),
  CONSTRAINT transportation_CC CHECK (transportation IN ('Y', 'N')),
  CONSTRAINT phot_video_CC CHECK (photo_video IN ('Y', 'N')),
  CONSTRAINT acedmics_CC CHECK (academics IN ('Y', 'N')),
  CONSTRAINT computer_policy_CC CHECK (computer_policy IN ('Y', 'N')),
  CONSTRAINT computer_access_CC CHECK (computer_access IN ('Y', 'N')),
  CONSTRAINT leave_club_CC CHECK (leave_club IN ('A', 'U')),
  CONSTRAINT electronics_CC CHECK (electronics IN ('Y', 'N')),
  CONSTRAINT memberreleaseform_pk PRIMARY KEY (memberid, authorizedindid),
  CONSTRAINT memberreleaseform_member_fk FOREIGN KEY (memberid) REFERENCES person (personid),
  CONSTRAINT memberrealease_authorized_fk FOREIGN KEY (authorizedindid) REFERENCES person (personid));
 
--The code below creates the table for Lunch where memberid is the primary and foreign key
--Check constraint for free_lunch, "Y"= Yes, they are eligible for free lunch and "N"= No, they are not eligible for free lunch
CREATE TABLE lunch (
  memberid NUMBER (6) NOT NULL,
  free_lunch CHAR (1) NOT NULL,
  CONSTRAINTS free_lunch_cc CHECK (free_lunch IN ('Y', 'N')),
  CONSTRAINT lunch_pk PRIMARY KEY (memberid),
  CONSTRAINT lunch_fk FOREIGN KEY (memberid) REFERENCES mbr (memberid));
  
--The code below creates the table for homework(hw) where hw_id is the primary key
CREATE TABLE hw (
  hw_id NUMBER (6) NOT NULL,
  subject VARCHAR2(35) NOT NULL,
  CONSTRAINT hw_pk PRIMARY KEY (hw_id));
  
--The code below creates the table for Medical History where memberid is the primary and foreign key
--Check constraint for immunization and counseling, "Y"= Yes and "N"= No
CREATE TABLE medical_history (
  memberid NUMBER(6) NOT NULL,
  l_wellchild DATE NOT NULL,
  immunizations CHAR(1) NOT NULL,
  rec_counseling CHAR(1) NOT NULL,
  CONSTRAINTS immunizations_cc CHECK (immunizations IN ('Y', 'N')),
  CONSTRAINTS rec_counseling_cc CHECK (rec_counseling IN ('Y', 'N')),
  CONSTRAINT medical_history_pk PRIMARY KEY (memberid),
  CONSTRAINT medical_history_fk FOREIGN KEY (memberid) REFERENCES mbr (memberid));

--The code below creates the table for Allergy where memberid is the primary key and foreign key
CREATE TABLE allergy (
  memberid NUMBER (6) NOT NULL,
  all_desc VARCHAR2(50) NOT NULL,
  CONSTRAINT allergy_pk PRIMARY KEY (memberid),
  CONSTRAINT allergy_fk FOREIGN KEY (memberid) REFERENCES mbr (memberid));
  
  --The code below creates the table for Services
CREATE TABLE services (
  servicesid NUMBER(7),
  servicename VARCHAR2 (35) NOT NULL,
  CONSTRAINT services_servicesid_PK Primary Key (servicesid));

--The table below creates Services provided M:M Table
CREATE TABLE Services_Provided (
  schoolid NUMBER (6),
  servicesid NUMBER (6),
  CONSTRAINT servicesprov_school_pk PRIMARY KEY (schoolid, servicesid),
  CONSTRAINT servicesprov_school1_person_fk FOREIGN KEY (schoolid) REFERENCES org (org_id),
  CONSTRAINT servicesprov_service_org_fk FOREIGN KEY (servicesid) REFERENCES services (servicesid));
  
--The code below creates the services_used table 
CREATE TABLE Services_Used(
    memberid NUMBER (6),
    servicesid NUMBER (6),
    CONSTRAINT servicesused_memberid_PK PRIMARY KEY (memberid,servicesid),
    CONSTRAINT servicesused_memberidfk FOREIGN KEY (memberid) REFERENCES mbr (memberid),
    CONSTRAINT servicesused_servicesid_fk FOREIGN KEY (servicesid) REFERENCES services (servicesid));

