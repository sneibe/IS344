--Group 3
--Group HW
--Jean Pratt
--May 4,2018

--Drop tables plus cascade constraints
DROP TABLE person CASCADE CONSTRAINTS;
DROP TABLE email CASCADE CONSTRAINTS;
DROP TABLE teacher CASCADE CONSTRAINTS;
DROP TABLE address CASCADE CONSTRAINTS;
DROP TABLE person_address CASCADE CONSTRAINTS; 
DROP TABLE phone CASCADE CONSTRAINTS;    
DROP TABLE person_phone CASCADE CONSTRAINTS; 
DROP TABLE org CASCADE CONSTRAINTS;
DROP TABLE person_org CASCADE CONSTRAINTS;
DROP TABLE mbr CASCADE CONSTRAINTS;
DROP TABLE services CASCADE CONSTRAINTS;
DROP TABLE services_provided CASCADE CONSTRAINTS;
DROP TABLE services_used CASCADE CONSTRAINTS;
DROP TABLE authorized_individual CASCADE CONSTRAINTS;
DROP TABLE consentform CASCADE CONSTRAINTS;
DROP TABLE memberreleaseform CASCADE CONSTRAINTS;
DROP TABLE dobirth CASCADE CONSTRAINTS;
DROP TABLE o_ethnicity CASCADE CONSTRAINTS;
DROP TABLE familyinfo CASCADE CONSTRAINTS;
DROP TABLE attendance CASCADE CONSTRAINTS;
DROP TABLE academic_info CASCADE CONSTRAINTS;
DROP TABLE hw CASCADE CONSTRAINTS;
DROP TABLE allergy CASCADE CONSTRAINTS;
DROP TABLE truancy CASCADE CONSTRAINTS;
DROP TABLE socialdev CASCADE CONSTRAINTS;
DROP TABLE medical_history CASCADE CONSTRAINTS;
DROP TABLE medication CASCADE CONSTRAINTS;
DROP TABLE healthcondition CASCADE CONSTRAINTS;
DROP TABLE medstaff CASCADE CONSTRAINTS;
DROP TABLE mbrmedinfo CASCADE CONSTRAINTS;
DROP TABLE paymentinfo CASCADE CONSTRAINTS;

--Drop statments for Sequences
DROP SEQUENCE seqpersonid;
DROP SEQUENCE seqaddressid;
DROP SEQUENCE seqphoneid;
DROP SEQUENCE seqord_id;
DROP SEQUENCE dobirthseq;
DROP SEQUENCE academicinformationseq;
DROP SEQUENCE socialdevseq;
DROP SEQUENCE seqconid;
DROP SEQUENCE seqhealthcondid;
DROP SEQUENCE seqmedicationid;

--The code below creates a table for Person where personid is the primary key
--Constraint for gender; M= Male, F= Female, O= Other
CREATE TABLE person(
  personid NUMBER(6) NOT NULL,
  lname    VARCHAR2(35) NOT NULL,
  fname    VARCHAR2(35) NOT NULL,
  mname    VARCHAR2 (35),
  gender   CHAR(1),
  CONSTRAINT persongender_cc CHECK (gender IN ('M','F','O')),
  CONSTRAINT personid_pk PRIMARY KEY (personid));
  
--The code below creates a table for Email where personid is the primary key and foreign key
CREATE TABLE email (
  personid NUMBER(6) NOT NULL,
  email_add VARCHAR2(35) NOT NULL,
  CONSTRAINT email_pk PRIMARY KEY (personid),
  CONSTRAINT email_fk FOREIGN KEY (personid) REFERENCES person (personid));

  
--The code below creates table for Authorized Individual where authorizedindid and memberid are the primary and foreign keys
--Check constraints are for emergency contact, authorized to pick up, head of the house hold and edit account information
--These constraints are all yes or no questions,so 'Y'= yes and n= 'N'

CREATE TABLE authorized_individual (
  authorizedindid NUMBER(6) NOT NULL,
  memberid        NUMBER(6) NOT NULL,
  relationship    VARCHAR2(35) NOT NULL,
  headofhouse     CHAR(1) NOT NULL,
  emg_cont        CHAR(1) NOT NULL,
  auth_pickup     CHAR(1) NOT NULL,
  edit_acct_info  CHAR(1) NOT NULL,
  CONSTRAINT authorized_emg_cont_cc CHECK (emg_cont IN ('Y', 'N')),
  CONSTRAINT authorized_individual_cc CHECK (auth_pickup IN ('Y', 'N')),
  CONSTRAINT authorized_headofhouse_cc CHECK (headofhouse IN ('Y', 'N')),
  CONSTRAINT authorized_edit_acct_info_cc CHECK (edit_acct_info IN ('Y', 'N')),
  CONSTRAINT authorizedmemberid_pk PRIMARY KEY (authorizedindid, memberid),
  CONSTRAINT authorizedindid_fk FOREIGN KEY (authorizedindid) REFERENCES person (personid),
  CONSTRAINT authorizedmemberid_fk FOREIGN KEY (memberid) REFERENCES person (personid));

--The code below creates table for Date of Birth where birthid is the primary key
CREATE TABLE dobirth (
  birthid   NUMBER (6) NOT NULL,
  dob       DATE NOT NULL,
  CONSTRAINT dobirth_pk PRIMARY KEY (birthid));

--The code below creates the table for Family Information where famid is the primary key
--Check constraint for liveswith, 'B'= Both Parents, 'M'= Mother, 'F'= Father, 'GP'= Grandparent(s), 
--'G'=Guardian(s), 'R'= Relative(s), 'FP'= Foster Parent(s)
--Check constraint for free_lunch, 'Y'= Yes, eligible for reduced/free lunch, and 'N' = no, not eligible for reduced/free lunch
CREATE TABLE familyinfo (
  famid     NUMBER (6) NOT NULL,
  famsize   NUMBER (20) NOT NULL,
  famincome NUMBER (10) NOT NULL,
  liveswith VARCHAR2 (2) NOT NULL,
  free_lunch CHAR (1) NOT NULL,
  mil_b_name VARCHAR2 (25) DEFAULT 'None' NOT NULL,
  CONSTRAINT familyinfo_lives_cc CHECK (liveswith IN ('B', 'M', 'F', 'GP', 'G', 'R', 'FP')),
  CONSTRAINT free_lunch_cc CHECK (free_lunch IN ('Y','N')),
  CONSTRAINT familyinfo_pk PRIMARY KEY (famid));
  
--The code below creates table for Member where memberid is the primary key
--Check Constraint for ethnicity 'C'= Caucasian, 'AA' = African American, 'AI' = American Indian, 'AP' = Asian-Asian Pacific,
--'HP' = Hispanic-Latino, 'ME' = Multi-Ethnic, 'O'= Other
CREATE TABLE mbr (
  memberid    NUMBER (6) NOT NULL,
  ethnicty    VARCHAR2 (2) NOT NULL,
  birthid     NUMBER(6) NOT NULL,
  famid       NUMBER(6) NOT NULL,
  CONSTRAINT mbr_ethnicty_cc CHECK (ethnicty IN ('C', 'AA','AI','AP','HP','ME','O')),
  CONSTRAINT mbr_memberid_pk PRIMARY KEY (memberid),
  CONSTRAINT mbr_memberid_fk FOREIGN KEY (memberid) REFERENCES person (personid),
  CONSTRAINT mbr_birthid_fk FOREIGN KEY (birthid) REFERENCES dobirth (birthid),
  CONSTRAINT mbr_famid_fk FOREIGN KEY (famid) REFERENCES familyinfo (famid));
  
--The code below creates the table for other ethnicity where memberid is the primary key and foreign key in the table
CREATE TABLE o_ethnicity (
  memberid  NUMBER (6) NOT NULL,
  ethnicity_desc  VARCHAR2(35) NOT NULL,
  CONSTRAINT o_ethnicity_pk PRIMARY KEY (memberid), 
  CONSTRAINT o_ethnicity_fk FOREIGN KEY (memberid) REFERENCES mbr (memberid));
  
--The code below creates the table for attendance where attendance_id is the primary key and
--memberid is the foreign key
CREATE TABLE attendance (
  attendance_id NUMBER (6) NOT NULL,
  check_in    DATE NOT NULL,
  check_out   DATE NOT NULL,
  ch_in_out_day DATE NOT NULL,
  memberid    NUMBER (6) NOT NULL,
  CONSTRAINT attendance_pk PRIMARY KEY (attendance_id),
  CONSTRAINT attendance_fk FOREIGN KEY (memberid) REFERENCES mbr (memberid));

--The code below creates the table for Truancy where memberid is the primary key and foreign key  
CREATE TABLE truancy (
  memberid NUMBER (6) NOT NULL,
  truancy_desc VARCHAR (35) NOT NULL,
  CONSTRAINT truancy_pk PRIMARY KEY (memberid),
  CONSTRAINT truancy_fk FOREIGN KEY (memberid) REFERENCES mbr (memberid));

--The code below creates the table for academic_info where membrerid is the primary key and foreign key
--Since we update this each year we will update the students grades and if their parents are satisfied each year
CREATE TABLE academic_info (
  academicid NUMBER (6) NOT NULL,
  memberid NUMBER (6) NOT NULL,
  grade   VARCHAR2 (35) NOT NULL,
  g_satis CHAR (1) NOT NULL,
  held_back CHAR (1) NOT NULL,
  CONSTRAINT g_statis_cc CHECK (g_satis IN ('Y', 'N')),
  CONSTRAINT held_back_cc CHECK (held_back IN ('Y', 'N')),
  CONSTRAINT academic_info_pk PRIMARY KEY (academicid),
  CONSTRAINT academic_memberid_fk FOREIGN KEY (memberid) REFERENCES mbr (memberid)); 

--The code below creates the Phone table where phoneid is the primary key. 
--Check constraint for ptype: 'M'= Mobile, 'H'= Home, 'W' = Work
CREATE TABLE phone (
  phoneid NUMBER (6) NOT NULL,
  pnumber NUMBER (10) NOT NULL,
  ptype  CHAR (1) NOT NULL,
  CONSTRAINT phone_ptype_cc CHECK ((ptype='C') OR (ptype='H')),
  CONSTRAINT phone_phoneid_pk PRIMARY KEY (phoneid));

--The code below creates the Personphone table which is the associative table that connects phone and person where phonid and personid are the primary and foreign keys
CREATE TABLE person_phone (
  phoneid NUMBER (6) NOT NULL,
  personid NUMBER (6) NOT NULL, 
  CONSTRAINT person_phone_pk PRIMARY KEY (phoneid, personid),
  CONSTRAINT personphone_personid_fk FOREIGN KEY (personid) REFERENCES person (personid),
  CONSTRAINT personphone_phoneid_fk FOREIGN KEY (phoneid) REFERENCES phone (phoneid));

--The code below creates the Address table where addrid is the primary key
CREATE TABLE address (
  addrid NUMBER (6) NOT NULL,
  strt VARCHAR2 (35) NOT NULL,
  city VARCHAR2 (35) NOT NULL,
  ste CHAR (2) DEFAULT 'WI' NOT NULL,
  zipcode VARCHAR2 (10) NOT NULL,
  CONSTRAINT addr_addrid1_pk PRIMARY KEY(addrid));

--The code below creates the Personaddress table which is the associative table that connects address and person 
--Where addrid and personid are the primary and foreign keys
CREATE TABLE person_address (
  addrid NUMBER (6) NOT NULL, 
  personid NUMBER (6) NOT NULL,
  CONSTRAINT personaddr_peraddr1_pk PRIMARY KEY (addrid,personid),
  CONSTRAINT personaddr_personid4_fk FOREIGN KEY (personid) REFERENCES person (personid),
  CONSTRAINT personaddr_addrid6_fk FOREIGN KEY (addrid) REFERENCES address (addrid));
  
-- The code below creates the table for Organization where org_id is the primary key
CREATE TABLE org (
  org_id  NUMBER(6) NOT NULL,
  org_name VARCHAR2(35) NOT NULL,
  fd_phone NUMBER (10) NOT NULL,
  CONSTRAINT org_org_id_pk PRIMARY KEY (org_id));

--The code below creates the table for Person_Org where org_id and personid are the primary and foreign keys
CREATE TABLE person_org (
  personid NUMBER(6) NOT NULL,
  org_id  NUMBER(6) NOT NULL,
  CONSTRAINT person_org_pk PRIMARY KEY (personid, org_id),
  CONSTRAINT person_org_person_fk FOREIGN KEY (personid) REFERENCES person (personid),
  CONSTRAINT person_org_org_fk FOREIGN KEY (org_id) REFERENCES org (org_id));

--The code below creates the table for Teacher where personid and teacherid are the primary and foreign keys
--The check constraint in this table to make sure they are entering a a valid school year
--'PK'= preschool,'4K'= 4k, '5K'= 5k, '1'= 1st grade, '2'=2nd grade,'3'= 3rd grade,'4'= 4th grade,'5'= 5th grade,
--'6'= 6th grade,'7'= 7th grade,'8'= 8th grade,'FR'= Freshman,'SO'= Sophmore,'JR'= Junior,'SR'= Senior
CREATE TABLE teacher (
  personid NUMBER (6) NOT NULL,
  teacherid NUMBER (6) NOT NULL,
  schoolyear VARCHAR(2) NOT NULL,
  fallacademicyear DATE NOT NULL,
  springacademicyear DATE NOT NULL,
  CONSTRAINT teacher_schoolyear_cc CHECK (schoolyear IN ('PK','4K', '5K', '1', '2','3','4','5','6','7','8','FR','SO','JR','SR')),
  CONSTRAINT teacher_pk PRIMARY KEY (personid, teacherid),
  CONSTRAINT teacher_person_fk FOREIGN KEY (personid) REFERENCES person (personid),
  CONSTRAINT teacher_teacher_fk FOREIGN KEY (personid) REFERENCES person (personid));

--The code below creates the table for Member Release Form where memberid and authorized individualids are the primary and foreign keys
--Check constraints for liability, transportation, photo_video, academics, computer policy, and electronics "Y" = Yes, understood
--and "N" = No,did not understand
--Check constraint for computer access is "Y"= Yes, they have permission to access computers or "N" No, they do not give permission to access computers
--Check constraint for authorized to leave is "A"= Authorized to leave unescorted or "U" = Unauthorized to leave unescorted
CREATE TABLE memberreleaseform (
  release_form_id NUMBER(6) NOT NULL,
  liability CHAR (1) DEFAULT 'Y' NOT NULL,
  transportation CHAR (1) DEFAULT 'Y' NOT NULL,
  photo_video CHAR (1) DEFAULT 'Y' NOT NULL,
  academics CHAR (1) DEFAULT 'Y' NOT NULL,
  computer_policy CHAR (1) DEFAULT 'Y' NOT NULL,
  computer_access CHAR (1) NOT NULL,
  leave_club CHAR (1) NOT NULL,
  electronics CHAR (1) DEFAULT 'N' NOT NULL,
  memberdatesigned DATE NOT NULL,
  authorizedinddatesigned DATE NOT NULL,
  memberid NUMBER (6) NOT NULL,
  authorizedindid NUMBER (6) NOT NULL,
  CONSTRAINT liability_CC CHECK (liability IN ('Y', 'N')),
  CONSTRAINT transportation_CC CHECK (transportation IN ('Y', 'N')),
  CONSTRAINT phot_video_CC CHECK (photo_video IN ('Y', 'N')),
  CONSTRAINT acedmics_CC CHECK (academics IN ('Y', 'N')),
  CONSTRAINT computer_policy_CC CHECK (computer_policy IN ('Y', 'N')),
  CONSTRAINT computer_access_CC CHECK (computer_access IN ('Y', 'N')),
  CONSTRAINT leave_club_CC CHECK (leave_club IN ('A', 'U')),
  CONSTRAINT electronics_CC CHECK (electronics IN ('Y', 'N')),
  CONSTRAINT memberreleaseform_pk PRIMARY KEY (release_form_id),
  CONSTRAINT memberreleaseform_member_fk FOREIGN KEY (memberid) REFERENCES person (personid),
  CONSTRAINT memberrealease_authorized_fk FOREIGN KEY (authorizedindid) REFERENCES person (personid));
 
  
--The code below creates the table for homework(hw) where hw_id is the primary key
CREATE TABLE hw (
  hw_id NUMBER (6) NOT NULL,
  hw_desc VARCHAR2(35) NOT NULL,
  CONSTRAINT hw_pk PRIMARY KEY (hw_id));
  
  --The code below creates the table for Services where servicesid is the primary key
CREATE TABLE services (
  servicesid NUMBER(6),
  servicename VARCHAR2 (35) NOT NULL,
  CONSTRAINT services_servicesid_PK PRIMARY KEY (servicesid));

--The table below creates Services provided M:M Table where schoolid and servicesid becomes the primary and foreign keys
CREATE TABLE services_provided (
  schoolid NUMBER (6),
  servicesid NUMBER (6),
  CONSTRAINT servicesprov_school_pk PRIMARY KEY (schoolid, servicesid),
  CONSTRAINT servicesprov_school1_person_fk FOREIGN KEY (schoolid) REFERENCES org (org_id),
  CONSTRAINT servicesprov_service_org_fk FOREIGN KEY (servicesid) REFERENCES services (servicesid));
  
--The code below creates the services_used table where the memberid and servicesid becomes the primary and foreign keys
CREATE TABLE services_used(
    memberid NUMBER (6),
    servicesid NUMBER (6),
    CONSTRAINT servicesused_memberid_PK PRIMARY KEY (memberid,servicesid),
    CONSTRAINT servicesused_memberidfk FOREIGN KEY (memberid) REFERENCES mbr (memberid),
    CONSTRAINT servicesused_servicesid_fk FOREIGN KEY (servicesid) REFERENCES services (servicesid));
    
--The code below creates the table for Medical History where memberid is the primary and foreign key
--Check constraint for immunization and counseling, "Y"= Yes and "N"= No
CREATE TABLE medical_history (
  memberid NUMBER(6) NOT NULL,
  l_wellchild DATE NOT NULL,
  immunizations CHAR(1) NOT NULL,
  rec_counseling CHAR(1) NOT NULL,
  CONSTRAINTS immunizations_cc CHECK (immunizations IN ('Y', 'N')),
  CONSTRAINTS rec_counseling_cc CHECK (rec_counseling IN ('Y', 'N')),
  CONSTRAINT medical_history_pk PRIMARY KEY (memberid),
  CONSTRAINT medical_history_fk FOREIGN KEY (memberid) REFERENCES mbr (memberid));

--The code below creates the table for Allergy where memberid is the primary key and foreign key
CREATE TABLE allergy (
  memberid NUMBER (6) NOT NULL,
  all_desc VARCHAR2(50) NOT NULL,
  CONSTRAINT allergy_pk PRIMARY KEY (memberid),
  CONSTRAINT allergy_fk FOREIGN KEY (memberid) REFERENCES mbr (memberid));
  

--The code below creates the table for Consent Form where conid is the primary key and foreign keys are memberid, authorizedindid and staffid
--Check constraint for memberstatus: 'G'= Guest, 'N'= New Member,'R'= Returning Member
--Check constraint for paymenttype: 'CA'= Cash, 'CK'= Check,'MO'= Money Order,'SS'= Scholarship
CREATE TABLE consentform (
    conid NUMBER (6) NOT NULL,
    memberstatus CHAR(1) NOT NULL,
    paid CHAR(1), 
    datedataentered DATE NOT NULL,
    orienschedule DATE NOT NULL,
    orientationtime DATE NOT NULL,
    completedorient CHAR(1) NOT NULL,
    memberid NUMBER (6) NOT NULL,
    authorizedindid NUMBER (6),
    staffid NUMBER (6) NOT NULL,
    CONSTRAINT consentformmemberstatus_cc CHECK (memberstatus IN ('G', 'N','R')),
    CONSTRAINT consentpay_cc CHECK (paid IN ('Y', 'N')),
    CONSTRAINT completedorient_cc CHECK (completedorient IN ('Y', 'N')),
    CONSTRAINT consentform_conid_pk PRIMARY KEY (conid),
    CONSTRAINT consentform1_memberid_fk FOREIGN KEY (memberid) REFERENCES mbr (memberid),
    CONSTRAINT consentform_authid_fk FOREIGN KEY (authorizedindid) REFERENCES person (personid),
    CONSTRAINT consentform_staff_fk FOREIGN KEY (staffid) REFERENCES person (personid));
    
--The code below creates the table for Payment Information where conid is the primary key and foreign key
--Check constraint for paymenttype: 'CA'= Cash, 'CK'= Check,'MO'= Money Order,'SS'= Scholarship

CREATE TABLE paymentinfo (
    conid NUMBER (6) NOT NULL,
    paymenttype CHAR (2) NOT NULL, 
    paymentamnt NUMBER (10) NOT NULL, 
    daterecievedpay DATE NOT NULL,
    dateenteredpay DATE NOT NULL,
    CONSTRAINT paymentinfo_cc CHECK (paymenttype IN ('CA', 'CK','MO','SS')),
    CONSTRAINT paymentinfo_conid_pk PRIMARY KEY (conid),
    CONSTRAINT paymentinfo2_conid_fk FOREIGN KEY (conid) REFERENCES paymentinfo (conid));  

--The code below creates the table for Social Development wheresocialdevid is the primary key and the memberid is the foreign key
--Check constraint for socialdevtype: 'DA' = Drug and Alcohol, 'LI'= Legal Issue, 'BU'= Bullying, 'FS' =Family Stress
CREATE TABLE SocialDev (
    socialdevid NUMBER (6) NOT NULL,
    socialdevtype VARCHAR2 (25) NOT NULL,
    socialdevdesc VARCHAR2 (50) NOT NULL,
    memberid NUMBER (6) NOT NULL,
    CONSTRAINT socialdevtype_cc CHECK (socialdevtype IN ('DA', 'LI', 'BU', 'FS')),
    CONSTRAINT socialdev_socialdevid_pk PRIMARY KEY (socialdevid),
    CONSTRAINT socialdev_memberid_fk FOREIGN KEY (memberid) REFERENCES mbr (memberid));

--The code below creates the table for Medication where medicationid is the primary key
CREATE TABLE medication (
    medicationid NUMBER (6) NOT NULL,
    medname VARCHAR2 (35) NOT NULL,
CONSTRAINT medication_medid_pk PRIMARY KEY (medicationid));

--The code below creates the table for Health Condition where helathcondid is the primary key
--The check constraint is for the health condition name, we want to make sure whoever is entering the data spells the name right.
--We us VARCHAR2 (39) because the longest helath condition we track is 39 characters long
CREATE TABLE healthcondition (
    healthcondid NUMBER (6) NOT NULL,
    healthcondname VARCHAR2 (39) NOT NULL, 
    CONSTRAINT healthcondname_CC CHECK (healthcondname IN ('Anxiety', 'Asthma','Attention deficit hyperactive disorder',
        'Autism', 'Bi-polar', 'Bleeding disorder' , 'Bone condition','Joint condition', 'Cancer','Depression','Diabetes', 'Ear infection',
        'Eating disorder', 'Epilepsy','Seizures','Blackouts', 'Gastrointestinal disorder', 'Bowel disorder', 'Migraines', 'Headaches',
        'Hearing disability', 'Heart disease', 'Hepatitis', 'High blood pressure', 'Low blood pressure', 'Kidney disease', 'Mental problems',
        'Emotional problems')),
    CONSTRAINT healthcon_healthcondid_pk PRIMARY KEY (healthcondid));

--The code below creates the table for Medical Staff where medstaffid and memberid are the primary and foreign keys
--Check constraint for job type: 'P' = Physician, 'D' = Doctor
CREATE TABLE medstaff (
    medstaffid NUMBER (6) NOT NULL,
    memberid NUMBER (6) NOT NULL,
    jobtype CHAR (1) NOT NULL,
    CONSTRAINT jobtype_cc CHECK (jobtype IN('P', 'D')),
    CONSTRAINT medstaff_medstaffid__pk PRIMARY KEY (medstaffid,memberid),
    CONSTRAINT medstaff_staffid_fk FOREIGN KEY (medstaffid) REFERENCES person (personid),
    CONSTRAINT medstaff_memberid_fk FOREIGN KEY (memberid) REFERENCES mbr (memberid));
    
--The code below creates the table for Member Medical Informaton where memberid, medicationid, healthcondid, medstaffid are the primary and foreign keys
--We use VARCHAR2 (25) for amnt_medication (amount of medication to take) so that the person can identify the units. For example take 2 pills or 3 teaspons 
CREATE TABLE mbrmedinfo (
    memberid NUMBER (6) NOT NULL, 
    medicationid NUMBER (6) NOT NULL,
    healthcondid NUMBER (6) NOT NULL,
    medstaffid NUMBER (6) NOT NULL,
    amnt_medication VARCHAR2 (25) NOT NULL,
    how_medication VARCHAR2 (25) NOT NULL,
    time_medication DATE NOT NULL, 
    reason_medication VARCHAR (35) NOT NULL,
    CONSTRAINT mbrmedinfo_memberid_pk PRIMARY KEY (memberid,medicationid,healthcondid,medstaffid),
    CONSTRAINT mbrmedinfo_memberid_fk FOREIGN KEY (memberid) REFERENCES mbr (memberid),
    CONSTRAINT mbrmedinfo_medid_fk FOREIGN KEY (medicationid) REFERENCES medication (medicationid),
    CONSTRAINT mbrmedinfo_healthcondid_fk FOREIGN KEY (healthcondid) REFERENCES healthcondition (healthcondid),
    CONSTRAINT mbrmedinfo_medstaffid_fk FOREIGN KEY (medstaffid) REFERENCES person (personid));
       
--Sequence is created to generate numbers for the PK personid
CREATE SEQUENCE seqpersonid
  START WITH 1
  INCREMENT BY 1
  NOCACHE;

--Intert statements for table person 
INSERT INTO person VALUES (seqpersonid.NEXTVAL, 'Johnson', 'Montrell', 'D', 'O');
INSERT INTO person VALUES (seqpersonid.NEXTVAL, 'Simonis', 'Brandon', 'D', 'M');
INSERT INTO person VALUES (seqpersonid.NEXTVAL, 'Ibe', 'Stacey', 'H', 'F');
INSERT INTO person (personid, lname, fname) VALUES (seqpersonid.NEXTVAL, 'Johnson', 'Riley');
INSERT INTO person (personid, lname, fname, mname) VALUES (seqpersonid.NEXTVAL, 'Brewer', 'Molly', 'J');
INSERT INTO person VALUES (seqpersonid.NEXTVAL, 'Simon', 'Jamie', 'J', 'M');
INSERT INTO person VALUES (seqpersonid.NEXTVAL, 'Berkley', 'Ethan', 'N', 'M');
INSERT INTO person (personid, lname, fname, gender) VALUES (seqpersonid.NEXTVAL, 'Wentzel', 'Claire', 'F');
INSERT INTO person VALUES (seqpersonid.NEXTVAL, 'Wentzel', 'Ben', 'R', 'M');
INSERT INTO person (personid, lname, fname) VALUES (seqpersonid.NEXTVAL, 'England', 'Ben');
INSERT INTO person (personid, lname, fname) VALUES (seqpersonid.NEXTVAL, 'Kay', 'Mary');
INSERT INTO person (personid, lname, fname) VALUES (seqpersonid.NEXTVAL, 'Strong', 'Derek');
INSERT INTO person (personid, lname, fname) VALUES (seqpersonid.NEXTVAL, 'Karp', 'David');
INSERT INTO person (personid, lname, fname) VALUES (seqpersonid.NEXTVAL, 'Ott', 'Scott');
INSERT INTO person (personid, lname, fname) VALUES (seqpersonid.NEXTVAL, 'Derks', 'Adam');
INSERT INTO person (personid, lname, fname) VALUES (seqpersonid.NEXTVAL, 'Derks', 'Moriah');
INSERT INTO person (personid, lname, fname) VALUES (seqpersonid.NEXTVAL, 'Hank', 'Aron');
INSERT INTO person (personid, lname, fname, Gender) VALUES (seqpersonid.NEXTVAL, 'Johnson', 'Aaron','M');
INSERT INTO person (personid, lname, fname, Gender) VALUES (seqpersonid.NEXTVAL, 'Johnson', 'Hayley','F');
INSERT INTO person (personid, lname, fname, Gender) VALUES (seqpersonid.NEXTVAL, 'Johnson', 'Mary','F');
INSERT INTO person (personid, lname, fname, Gender) VALUES (seqpersonid.NEXTVAL, 'Simonis', 'Danny', 'M');
INSERT INTO person (personid, lname, fname, Gender) VALUES (seqpersonid.NEXTVAL, 'Simonis', 'Sandy', 'F');
INSERT INTO person (personid, lname, fname, Gender) VALUES (seqpersonid.NEXTVAL, 'Simonis', 'David', 'M');
INSERT INTO person (personid, lname, fname, Gender) VALUES (seqpersonid.NEXTVAL, 'Simonis', 'Kyle', 'M');
INSERT INTO person (personid, lname, fname, Gender) VALUES (seqpersonid.NEXTVAL, 'Ibe', 'Molly', 'F');
INSERT INTO person (personid, lname, fname, Gender) VALUES (seqpersonid.NEXTVAL, 'Ibe', 'Brooke', 'F');
INSERT INTO person (personid, lname, fname, Gender) VALUES (seqpersonid.NEXTVAL, 'Ibe', 'Joe', 'M');
INSERT INTO person (personid, lname, fname, Gender) VALUES (seqpersonid.NEXTVAL, 'Johnson', 'Emily', 'F');
INSERT INTO person (personid, lname, fname, Gender) VALUES (seqpersonid.NEXTVAL, 'Johnson', 'Frank', 'M');
INSERT INTO person (personid, lname, fname, Gender) VALUES (seqpersonid.NEXTVAL, 'Brewer', 'Sam', 'M');
INSERT INTO person (personid, lname, fname, Gender) VALUES (seqpersonid.NEXTVAL, 'Brewer', 'Samuel', 'M');
INSERT INTO person (personid, lname, fname, Gender) VALUES (seqpersonid.NEXTVAL, 'Brewer', 'Stacey', 'F');
INSERT INTO person (personid, lname, fname, Gender) VALUES (seqpersonid.NEXTVAL, 'Simon', 'Nick', 'M');
INSERT INTO person (personid, lname, fname, Gender) VALUES (seqpersonid.NEXTVAL, 'Van Roy', 'Kim', 'F');
INSERT INTO person (personid, lname, fname, Gender) VALUES (seqpersonid.NEXTVAL, 'Braun', 'Ryan', 'M');
INSERT INTO person (personid, lname, fname, Gender) VALUES (seqpersonid.NEXTVAL, 'Berkley', 'Tom', 'M');
INSERT INTO person (personid, lname, fname, Gender) VALUES (seqpersonid.NEXTVAL, 'Berkley', 'Sue', 'F');
INSERT INTO person (personid, lname, fname, Gender) VALUES (seqpersonid.NEXTVAL, 'Berkley', 'Tim', 'M');
INSERT INTO person (personid, lname, fname, Gender) VALUES (seqpersonid.NEXTVAL, 'Berkley', 'Shannon', 'F');
INSERT INTO person (personid, lname, fname, Gender) VALUES (seqpersonid.NEXTVAL, 'Wentzel', 'Hailey', 'F');
INSERT INTO person (personid, lname, fname, Gender) VALUES (seqpersonid.NEXTVAL, 'Wentzel', 'Mike', 'M');
INSERT INTO person (personid, lname, fname, Gender) VALUES (seqpersonid.NEXTVAL, 'Varian', 'Brooke', 'F');
INSERT INTO person (personid, lname, fname) VALUES (seqpersonid.NEXTVAL, 'Kapping', 'Mitchell');
INSERT INTO person (Personid, lname, fname) VALUES(seqpersonid.NEXTVAL, 'Carter', 'Matthew');
INSERT INTO person (personid, lname, fname) VALUES (seqpersonid.NEXTVAL, 'Kelley', 'Aaron');
INSERT INTO person (personid, lname, fname) VALUES (seqpersonid.NEXTVAL, 'Wians', 'Andy');
INSERT INTO person (personid, lname, fname) VALUES (seqpersonid.NEXTVAL, 'Gust', 'Leisha');
INSERT INTO person (personid, lname, fname) VALUES (seqpersonid.NEXTVAL, 'Bauer', 'Sharon');
INSERT INTO person (personid, lname, fname) VALUES (seqpersonid.NEXTVAL, 'Lake', 'Kendal');
INSERT INTO person (personid, lname, fname) VALUES (seqpersonid.NEXTVAL, 'Gunderson', 'James');
INSERT INTO person (personid, lname, fname) VALUES (seqpersonid.NEXTVAL, 'Smith', 'Jake');
INSERT INTO person (personid, lname, fname) VALUES (seqpersonid.NEXTVAL, 'Anderson', 'Jess');
INSERT INTO person (personid, lname, fname) VALUES (seqpersonid.NEXTVAL, 'Culver', 'Kyle');
INSERT INTO person (personid, lname, fname) VALUES (seqpersonid.NEXTVAL, 'Holtz', 'Liz');
INSERT INTO person (personid, lname, fname) VALUES (seqpersonid.NEXTVAL, 'Glor', 'Grace');
INSERT INTO person (personid, lname, fname) VALUES (seqpersonid.NEXTVAL, 'Anderson', 'Nick');
INSERT INTO person (personid, lname, fname) VALUES (seqpersonid.NEXTVAL, 'Kann', 'Ryan');
INSERT INTO person (personid, lname, fname) VALUES (seqpersonid.NEXTVAL, 'Pelton', 'Jen');



--Insert statements for email
INSERT INTO email VALUES (2, 'mjohnson@gmail.com');
INSERT INTO email VALUES (3, 'bsimonis59@gmail.com');
INSERT INTO email VALUES (5, 'rjohnson@yahoo.com');
INSERT INTO email VALUES (6, 'mbrewer4@yahoo.com');
INSERT INTO email VALUES (8, 'eberkley@gmail.com');
INSERT INTO email VALUES (9, 'mjohnson@gmail.com');
INSERT INTO email VALUES (10, 'bschupp12@yahoo.com');
INSERT INTO email VALUES (19, 'ajohnson@yahoo.com');
INSERT INTO email VALUES (20, 'hjohnson@outlook.com');
INSERT INTO email VALUES (21, 'mjohnson55@microsoft.com');
INSERT INTO email VALUES (22, 'daniel.simonis@saceredheart.org');
INSERT INTO email VALUES (23, 'sandy.simonis@gmail.com');
INSERT INTO email VALUES (24, 'dsimonis2@gmail.com');
INSERT INTO email VALUES (25, 'ksimonis69@yahoo.com');
INSERT INTO email VALUES (26, 'molly.ibe333@yahoo.com');
INSERT INTO email VALUES (27, 'brookeibe99@gmail.com');
INSERT INTO email VALUES (28, 'joe.ibe.football@gmail.com');
INSERT INTO email VALUES (29, 'ejohnson3@outlook.com');
INSERT INTO email VALUES (30, 'fjohnson@outlook.com');
INSERT INTO email VALUES (32, 'sbrewer89@yahoo.com');
INSERT INTO email VALUES (33, 'stbrewer90@yahoo.com');
INSERT INTO email VALUES (34, 'nsimon@gmail.com');
INSERT INTO email VALUES (35, 'kimban9@yahoo.com');
INSERT INTO email VALUES (36, 'rbraun@microsoft.com');
INSERT INTO email VALUES (37, 't.berk@yahoo.com');
INSERT INTO email VALUES (38, 's.berk36@gmail.com');
INSERT INTO email VALUES (39, 'tim.berkley@gmail.com');
INSERT INTO email VALUES (40, 'shannon.berkley2@gmail.com');
INSERT INTO email VALUES (43, 'bvarian3459@outlook.com');

--Insert statements for teacher
INSERT INTO teacher VALUES (2,11,'FR', TO_DATE( '2017', 'YYYY'), TO_DATE( '2018', 'YYYY'));
INSERT INTO teacher VALUES (2,15,'8', TO_DATE( '2016', 'YYYY'), TO_DATE( '2017', 'YYYY'));
INSERT INTO teacher VALUES (3,12,'5', TO_DATE( '2017', 'YYYY'), TO_DATE( '2018', 'YYYY'));
INSERT INTO teacher VALUES (3,13,'4', TO_DATE( '2016', 'YYYY'), TO_DATE( '2017', 'YYYY'));
INSERT INTO teacher VALUES (4,12,'5', TO_DATE( '2017', 'YYYY'), TO_DATE( '2018', 'YYYY'));
INSERT INTO teacher VALUES (5,11,'SO', TO_DATE( '2017', 'YYYY'), TO_DATE( '2018', 'YYYY'));
INSERT INTO teacher VALUES (6,14,'5K', TO_DATE( '2017', 'YYYY'), TO_DATE( '2018', 'YYYY'));
INSERT INTO teacher VALUES (6,16,'4K', TO_DATE( '2016', 'YYYY'), TO_DATE( '2017', 'YYYY'));
INSERT INTO teacher VALUES (7,15,'7', TO_DATE( '2017', 'YYYY'), TO_DATE( '2018', 'YYYY'));
INSERT INTO teacher VALUES (7,12,'6', TO_DATE( '2016', 'YYYY'), TO_DATE( '2017', 'YYYY'));
INSERT INTO teacher VALUES (8,17,'2', TO_DATE( '2017', 'YYYY'), TO_DATE( '2018', 'YYYY'));
INSERT INTO teacher VALUES (9,18,'3', TO_DATE( '2017', 'YYYY'), TO_DATE( '2018', 'YYYY'));
INSERT INTO teacher VALUES (10,15,'7', TO_DATE( '2017', 'YYYY'), TO_DATE( '2018', 'YYYY'));
INSERT INTO teacher VALUES (10,12,'6', TO_DATE( '2017', 'YYYY'), TO_DATE( '2018', 'YYYY'));

--Insert statements for authorized individual
INSERT INTO authorized_individual VALUES (19,2, 'Father', 'Y', 'Y', 'Y','Y');
INSERT INTO authorized_individual VALUES (20,2, 'Mother', 'N', 'Y', 'Y','Y');
INSERT INTO authorized_individual VALUES (21,2, 'Aunt', 'N', 'Y', 'Y','N');
INSERT INTO authorized_individual VALUES (22,3, 'Father', 'Y', 'Y', 'Y','Y');
INSERT INTO authorized_individual VALUES (23,3, 'Mother', 'N', 'Y', 'Y','Y');
INSERT INTO authorized_individual VALUES (24,3, 'Uncle', 'N', 'Y', 'N','N');
INSERT INTO authorized_individual VALUES (25,3, 'Brother', 'N', 'N', 'Y','N');
INSERT INTO authorized_individual VALUES (26,4, 'Mother', 'Y', 'Y', 'Y','Y');
INSERT INTO authorized_individual VALUES (27,4, 'Aunt', 'N', 'Y', 'Y','Y');
INSERT INTO authorized_individual VALUES (28,4, 'Uncle', 'N', 'Y', 'Y','N');
INSERT INTO authorized_individual VALUES (29,5, 'Mother', 'Y', 'Y', 'Y','Y');
INSERT INTO authorized_individual VALUES (30,5, 'Father', 'N', 'Y', 'Y','Y');
INSERT INTO authorized_individual VALUES (31,6, 'Father', 'Y', 'Y', 'Y','Y');
INSERT INTO authorized_individual VALUES (32,6, 'Uncle', 'N', 'Y', 'Y','Y');
INSERT INTO authorized_individual VALUES (33,6, 'Aunt', 'N', 'Y', 'Y','N');
INSERT INTO authorized_individual VALUES (34,7, 'Father', 'Y', 'Y', 'Y','Y');
INSERT INTO authorized_individual VALUES (35,7, 'Family Friend', 'N', 'Y', 'Y','N');
INSERT INTO authorized_individual VALUES (36,7, 'Cousin', 'N', 'Y', 'N','N');
INSERT INTO authorized_individual VALUES (37,8, 'Father', 'Y', 'Y', 'Y','Y');
INSERT INTO authorized_individual VALUES (38,8, 'Mother', 'N', 'Y', 'Y','Y');
INSERT INTO authorized_individual VALUES (39,8, 'Uncle', 'N', 'Y', 'Y','N');
INSERT INTO authorized_individual VALUES (40,8, 'Aunt', 'N', 'Y', 'Y','N');
INSERT INTO authorized_individual VALUES (41,9, 'Grandmother', 'Y', 'Y', 'Y','Y');
INSERT INTO authorized_individual VALUES (42,9, 'Grandfather', 'N', 'Y', 'Y','Y');
INSERT INTO authorized_individual VALUES (43,9, 'Family Friend', 'N', 'Y', 'Y','N');
INSERT INTO authorized_individual VALUES (41,10, 'Grandmother', 'Y', 'Y', 'Y','Y');
INSERT INTO authorized_individual VALUES (42,10, 'Grandfather', 'N', 'Y', 'Y','Y');
INSERT INTO authorized_individual VALUES (43,10, 'Family Friend', 'N', 'N', 'Y','N');


--Sequence is created to generate numbers for the PK addressid
CREATE SEQUENCE seqaddressid
  START WITH 1
  INCREMENT BY 1
  NOCACHE;

--Insert Statments for address
INSERT INTO address VALUES(seqaddressid.NEXTVAL, '422 Kay Street', 'Eau Claire',DEFAULT, '54703-6362');
INSERT INTO address VALUES(seqaddressid.NEXTVAL, '505 5th Street', 'Chippewa Falls',DEFAULT, ' 54729');
INSERT INTO address VALUES(seqaddressid.NEXTVAL, '800 Keith Street', 'Eau Claire',DEFAULT, '54703-6362');
INSERT INTO address VALUES(seqaddressid.NEXTVAL, '900 Lake Sreet', 'Eau Claire',DEFAULT, '54701-6362');
INSERT INTO address VALUES(seqaddressid.NEXTVAL, '122 4th Sreet', 'Eau Claire',DEFAULT, '54701-6362');
INSERT INTO address VALUES(seqaddressid.NEXTVAL, '150 Stanley Street', 'Stanley',DEFAULT, '54768');
INSERT INTO address VALUES(seqaddressid.NEXTVAL, '600 Hastings', 'Eau Claire',DEFAULT, '54701-6362');
INSERT INTO address VALUES(seqaddressid.NEXTVAL, '700 5th', 'Eau Claire',DEFAULT, '54701-6362');
INSERT INTO address VALUES(seqaddressid.NEXTVAL, '500 Kim Street', 'Eau Claire',DEFAULT, '54703-6362');
INSERT INTO address VALUES(seqaddressid.NEXTVAL, '200 Birch Street', 'Eau Claire',DEFAULT, '54703-6362');
INSERT INTO address VALUES(seqaddressid.NEXTVAL, '434 North Lane', 'Eau Claire',DEFAULT, '54703-6362');
INSERT INTO address VALUES(seqaddressid.NEXTVAL, '400 Galloway Street', 'Eau Claire',DEFAULT, '54703-6362');
INSERT INTO address VALUES(seqaddressid.NEXTVAL, '440 North Shore Drive', 'Seymour',DEFAULT, '54702-6363');
INSERT INTO address VALUES(seqaddressid.NEXTVAL, '808 14th Street', 'Eau Claire',DEFAULT, '54701-6362');
INSERT INTO address VALUES(seqaddressid.NEXTVAL, '1244 State Street', 'Eau Claire',DEFAULT, '54703-6362');
INSERT INTO address VALUES(seqaddressid.NEXTVAL, '422 Hudson Street', 'Eau Claire',DEFAULT, '54703-6362');


--Insert statements for person_address
INSERT INTO person_address VALUES (2,2);
INSERT INTO person_address VALUES (2,19);
INSERT INTO person_address VALUES (2,20);
INSERT INTO person_address VALUES (3,21);
INSERT INTO person_address VALUES (4,3);
INSERT INTO person_address VALUES (4,22);
INSERT INTO person_address VALUES (4,23);
INSERT INTO person_address VALUES (4,25);
INSERT INTO person_address VALUES (5,24);
INSERT INTO person_address VALUES (6,4);
INSERT INTO person_address VALUES (6,26);
INSERT INTO person_address VALUES (7,27);
INSERT INTO person_address VALUES (7,28);
INSERT INTO person_address VALUES (8,5);
INSERT INTO person_address VALUES (8,29);
INSERT INTO person_address VALUES (8,30);
INSERT INTO person_address VALUES (9,6);
INSERT INTO person_address VALUES (9,31);
INSERT INTO person_address VALUES (10,32);
INSERT INTO person_address VALUES (10,33);
INSERT INTO person_address VALUES (11,7);
INSERT INTO person_address VALUES (11,34);
INSERT INTO person_address VALUES (12,35);
INSERT INTO person_address VALUES (13,36);
INSERT INTO person_address VALUES (14,8);
INSERT INTO person_address VALUES (14,37);
INSERT INTO person_address VALUES (14,38);
INSERT INTO person_address VALUES (15,39);
INSERT INTO person_address VALUES (15,40);
INSERT INTO person_address VALUES (16,9);
INSERT INTO person_address VALUES (16,10);
INSERT INTO person_address VALUES (16,41);
INSERT INTO person_address VALUES (16,42);
INSERT INTO person_address VALUES (17,43);

--Sequence created to generate numbers for phoneid
CREATE SEQUENCE seqphoneid
START WITH 1
INCREMENT BY 1
NOCACHE;

--Insert Statements for table phone
INSERT INTO phone VALUES (seqphoneid.NEXTVAL, 7158586969, 'C');
INSERT INTO phone VALUES (seqphoneid.NEXTVAL, 7158500058, 'C');
INSERT INTO phone VALUES (seqphoneid.NEXTVAL, 9207455845, 'C');
INSERT INTO phone VALUES (seqphoneid.NEXTVAL, 7156870214, 'H');
INSERT INTO phone VALUES (seqphoneid.NEXTVAL, 9207405560, 'C');
INSERT INTO phone VALUES (seqphoneid.NEXTVAL, 9207405562, 'C');
INSERT INTO phone VALUES (seqphoneid.NEXTVAL, 7159854562, 'H');
INSERT INTO phone VALUES (seqphoneid.NEXTVAL, 9208431497, 'C');
INSERT INTO phone VALUES (seqphoneid.NEXTVAL, 9208580058, 'C');
INSERT INTO phone VALUES (seqphoneid.NEXTVAL, 7158884566, 'H');
INSERT INTO phone VALUES (seqphoneid.NEXTVAL, 7154200001, 'C');
INSERT INTO phone VALUES (seqphoneid.NEXTVAL, 9208584848, 'C');
INSERT INTO phone VALUES (seqphoneid.NEXTVAL, 6128556566, 'C');
INSERT INTO phone VALUES (seqphoneid.NEXTVAL, 7155147185, 'C');
INSERT INTO phone VALUES (seqphoneid.NEXTVAL, 7155147186, 'C');
INSERT INTO phone VALUES (seqphoneid.NEXTVAL, 4145158978, 'C');
INSERT INTO phone VALUES (seqphoneid.NEXTVAL, 7158975654, 'C');
INSERT INTO phone VALUES (seqphoneid.NEXTVAL, 7155148008, 'C');
INSERT INTO phone VALUES (seqphoneid.NEXTVAL, 7155148052, 'C');
INSERT INTO phone VALUES (seqphoneid.NEXTVAL, 7155996212, 'H');
INSERT INTO phone VALUES (seqphoneid.NEXTVAL, 7155643234, 'C');
INSERT INTO phone VALUES (seqphoneid.NEXTVAL, 7158974454, 'H');
INSERT INTO phone VALUES (seqphoneid.NEXTVAL, 6128556969, 'C');

--Insert Statements for table person_phone
INSERT INTO person_phone VALUES (2,19);
INSERT INTO person_phone VALUES (3,20);
INSERT INTO person_phone VALUES (4,21);
INSERT INTO person_phone VALUES (5,22);
INSERT INTO person_phone VALUES (5,23);
INSERT INTO person_phone VALUES (6,24);
INSERT INTO person_phone VALUES (7,25);
INSERT INTO person_phone VALUES (8,26);
INSERT INTO person_phone VALUES (9,27);
INSERT INTO person_phone VALUES (10,28);
INSERT INTO person_phone VALUES (11,29);
INSERT INTO person_phone VALUES (11,30);
INSERT INTO person_phone VALUES (12,31);
INSERT INTO person_phone VALUES (13,32);
INSERT INTO person_phone VALUES (14,33);
INSERT INTO person_phone VALUES (15,34);
INSERT INTO person_phone VALUES (16,35);
INSERT INTO person_phone VALUES (17,36);
INSERT INTO person_phone VALUES (18,37);
INSERT INTO person_phone VALUES (19,38);
INSERT INTO person_phone VALUES (20,39);
INSERT INTO person_phone VALUES (21,40);
INSERT INTO person_phone VALUES (22,41);
INSERT INTO person_phone VALUES (23,42);
INSERT INTO person_phone VALUES (24,43);


--Sequence created to generat numbers for org_id
CREATE SEQUENCE seqord_id
START WITH 1
INCREMENT BY 1;

--Insert statements for table org
INSERT INTO org VALUES (seqord_id.NEXTVAL, 'Menards', 7158300011);
INSERT INTO org VALUES (seqord_id.NEXTVAL, 'Festival', 715838100);
INSERT INTO org VALUES (seqord_id.NEXTVAL, 'Target', 7158380196);
INSERT INTO org VALUES (seqord_id.NEXTVAL, 'Sacred Heart Hospital', 7157174121);
INSERT INTO org VALUES (seqord_id.NEXTVAL, 'University of Wisconsin-Eau Claire', 7158364636);
INSERT INTO org VALUES (seqord_id.NEXTVAL, 'Sodexo', 7158362186);
INSERT INTO org VALUES (seqord_id.NEXTVAL, 'Golds Gym', 7155524570);
INSERT INTO org VALUES (seqord_id.NEXTVAL, 'Shopko', 7158329777);
INSERT INTO org VALUES (seqord_id.NEXTVAL, 'Memorial High School', 7158526600);
INSERT INTO org VALUES (seqord_id.NEXTVAL, 'South Middle School', 7158525200);
INSERT INTO org VALUES (seqord_id.NEXTVAL, 'LakeShore Elementary School', 7158523400);
INSERT INTO org VALUES (seqord_id.NEXTVAL, 'Manz Elementary School', 7158523900);

--Insert statements for table person_org
INSERT INTO person_org VALUES (19, 2);
INSERT INTO person_org VALUES (26, 2);
INSERT INTO person_org VALUES (30, 2);
INSERT INTO person_org VALUES (37, 2);
INSERT INTO person_org VALUES (42, 2);
INSERT INTO person_org VALUES (41, 3);
INSERT INTO person_org VALUES (20, 3);
INSERT INTO person_org VALUES (25, 3);
INSERT INTO person_org VALUES (24, 4);
INSERT INTO person_org VALUES (21, 5);
INSERT INTO person_org VALUES (22, 5);
INSERT INTO person_org VALUES (23, 5);
INSERT INTO person_org VALUES (40, 5);
INSERT INTO person_org VALUES (43, 5);
INSERT INTO person_org VALUES (27, 6);
INSERT INTO person_org VALUES (31, 6);
INSERT INTO person_org VALUES (36, 6);
INSERT INTO person_org VALUES (39, 6);
INSERT INTO person_org VALUES (33, 6);
INSERT INTO person_org VALUES (34, 6);
INSERT INTO person_org VALUES (37, 7);
INSERT INTO person_org VALUES (35, 7);
INSERT INTO person_org VALUES (28, 8);
INSERT INTO person_org VALUES (32, 8);
INSERT INTO person_org VALUES (29, 9);
INSERT INTO person_org VALUES (11, 10);
INSERT INTO person_org VALUES (15, 11);
INSERT INTO person_org VALUES (12, 12);
INSERT INTO person_org VALUES (13, 12);
INSERT INTO person_org VALUES (14, 12);
INSERT INTO person_org VALUES (16, 12);
INSERT INTO person_org VALUES (17, 12);
INSERT INTO person_org VALUES (18, 13);

--the code below creates the sequence for Date of Birth ID. 
CREATE SEQUENCE dobirthseq
START WITH 1
INCREMENT BY 1
NOCACHE;

--The table below creates the date of birth ID 
INSERT INTO dobirth VALUES (dobirthseq.NEXTVAL, '21-OCT-04');
INSERT INTO dobirth VALUES (dobirthseq.NEXTVAL, '31-AUG-05');
INSERT INTO dobirth VALUES (dobirthseq.NEXTVAL, '04-JUL-05');
INSERT INTO dobirth VALUES (dobirthseq.NEXTVAL, '05-OCT-02'); 
INSERT INTO dobirth VALUES (dobirthseq.NEXTVAL, '04-JUL-06');
INSERT INTO dobirth VALUES (dobirthseq.NEXTVAL, '05-MAR-15');
INSERT INTO dobirth VALUES (dobirthseq.NEXTVAL, '13-APR-13');
INSERT INTO dobirth VALUES (dobirthseq.NEXTVAL, '12-JAN-05');



--The code below are the insers statement for Homework table
INSERT INTO hw VALUES (2,'Geometry and history');
INSERT INTO hw VALUES (3,'Math and reading Harry Potter');
INSERT INTO hw VALUES (4,'Help with Science of rocks');
INSERT INTO hw VALUES (5,'Statistics and writing');
INSERT INTO hw VALUES (6,'Reading chapter books');
INSERT INTO hw VALUES (7,'Writing');
INSERT INTO hw VALUES (8,'Social Studies');
INSERT INTO hw VALUES (9,'Alebgra');


--DROP SEQUENCES
DROP SEQUENCE seqfamid;

--Sequence created to generate numbers for famid
CREATE SEQUENCE seqfamid
START WITH 1
INCREMENT BY 1;

--Insert statement for Familyinfo
INSERT INTO familyinfo VALUES (seqfamid.NEXTVAL, 3, 70000, 'B', 'N', DEFAULT); 
INSERT INTO familyinfo VALUES (seqfamid.NEXTVAL, 4, 1000000, 'B', 'N', 'Army');
INSERT INTO familyinfo VALUES (seqfamid.NEXTVAL, 2, 35000, 'M', 'Y', DEFAULT); 
INSERT INTO familyinfo VALUES (seqfamid.NEXTVAL, 5, 55000, 'B', 'Y', DEFAULT);
INSERT INTO familyinfo VALUES (seqfamid.NEXTVAL, 3, 45000, 'F', 'Y', 'Navy'); 
INSERT INTO familyinfo VALUES (seqfamid.NEXTVAL, 2, 30000, 'R', 'Y', 'Marine'); 
INSERT INTO familyinfo VALUES (seqfamid.NEXTVAL, 5, 49000, 'B', 'Y', DEFAULT); 
INSERT INTO familyinfo VALUES (seqfamid.NEXTVAL, 6, 55000, 'GP', 'Y', 'Army'); 
 

 
--The table below creates the table for mbr
--Check Constraint for ethnicity 'C'= Caucasian, 'AA' = African American, 'AI' = American Indian, 'AP' = Asian-Asian Pacific,
--'HP' = Hispanic-Latino, 'ME' = Multi-Ethnic, 'O'= Other
INSERT INTO mbr VALUES (2, 'AA', 2,3 );
INSERT INTO mbr VALUES (3, 'C', 3, 3);
INSERT INTO mbr VALUES (4, 'ME', 3, 4);
INSERT INTO mbr VALUES (5, 'C',4,5);
INSERT INTO mbr VALUES (6, 'AP',5,6);
INSERT INTO mbr VALUES (7,'AI',6,6);
INSERT INTO mbr VALUES (8,'O',7,7);
INSERT INTO mbr VALUES (9, 'C',8,7);
INSERT INTO mbr VALUES (10,'HP',9,8);

--Insert statements for table o_ethnicity
Insert into O_ETHNICITY values (8, 'Jamaican');

--The code below are the insers statement for Truancy Table
INSERT INTO truancy VALUES (3,'Fighting with students');
INSERT INTO truancy  VALUES (5,'Skipping class');
INSERT INTO truancy  VALUES (9,'Bullying');

--the code below creates the sequence for Academic Information. 
CREATE SEQUENCE academicinformationseq
START WITH 1
INCREMENT BY 1
NOCACHE;

--The code below are the insert statements for Academic Information
INSERT INTO academic_info VALUES (academicinformationseq.NEXTVAL,2,'FR','Y','N');
INSERT INTO academic_info VALUES (academicinformationseq.NEXTVAL,3,'5','Y','N');
INSERT INTO academic_info VALUES (academicinformationseq.NEXTVAL,4,'5','Y','N');
INSERT INTO academic_info VALUES (academicinformationseq.NEXTVAL,5,'SO','Y','N');
INSERT INTO academic_info VALUES (academicinformationseq.NEXTVAL,6,'5K','Y','N');
INSERT INTO academic_info VALUES (academicinformationseq.NEXTVAL,7,'7','Y','N');
INSERT INTO academic_info VALUES (academicinformationseq.NEXTVAL,8,'2','Y','N');
INSERT INTO academic_info VALUES (academicinformationseq.NEXTVAL,9,'3','N','Y');

--Sequence is created to generate numbers for the PK conid
CREATE SEQUENCE seqconid
START WITH 1
INCREMENT BY 1
NOCACHE;

--Insert values into the consent form table
INSERT INTO consentform
VALUES (seqconid.NEXTVAL, 'R', 'Y', '05-JAN-2018', '15-JAN-2018', TO_DATE('15:30', 'HH24:MI'), 'Y', 2, 19, 44);
INSERT INTO consentform
VALUES (seqconid.NEXTVAL, 'R', 'Y', '15-FEB-2018', '20-FEB-2018', TO_DATE('15:30', 'HH24:MI'), 'Y', 3, 22, 45);
INSERT INTO consentform
VALUES (seqconid.NEXTVAL, 'N', 'Y', '05-DEC-2017', '08-DEC-2017', TO_DATE('15:30', 'HH24:MI'), 'Y', 4, 26, 44);
INSERT INTO consentform
VALUES (seqconid.NEXTVAL, 'R', 'Y', '10-JAN-2018', '13-JAN-2018', TO_DATE('15:30', 'HH24:MI'), 'Y', 5, 29, 44);
INSERT INTO consentform
VALUES (seqconid.NEXTVAL, 'G', 'N', '20-FEB-2018', '23-MAY-2018', TO_DATE('15:30', 'HH24:MI'), 'N', 6, 31, 45);
INSERT INTO consentform
VALUES (seqconid.NEXTVAL, 'R', 'Y', '10-OCT-2017', '18-OCT-2017', TO_DATE('14:30', 'HH24:MI'), 'Y', 7, 34, 45);
INSERT INTO consentform
VALUES (seqconid.NEXTVAL, 'R', 'Y', '26-JAN-2018', '15-SEP-2018', TO_DATE('16:00', 'HH24:MI'), 'N', 8, 37, 45);
INSERT INTO consentform
VALUES (seqconid.NEXTVAL, 'N', 'Y', '15-SEP-2017', '20-SEP-2017', TO_DATE('15:30', 'HH24:MI'), 'Y', 9, 41, 44);
INSERT INTO consentform
VALUES (seqconid.NEXTVAL, 'N', 'Y', '15-SEP-2017', '20-SEP-2017', TO_DATE('15:30', 'HH24:MI'), 'Y', 10, 41, 44);

--Teh code below creates the sequence for the social development ID
CREATE SEQUENCE socialdevseq
START WITH 1
INCREMENT BY 1
NOCACHE;

--The code below are the insert statements for the Social Devlopment Table
--Check constraint for socialdevtype: 
--'DA' = Drug and Alcohol, 'LI'= Legal Issue, 'BU'= Bullying, 'FS' =Family Stress
INSERT INTO socialdev VALUES (socialdevseq.NEXTVAL,'LI','Fighting with students very agressive',3);
INSERT INTO socialdev VALUES (socialdevseq.NEXTVAL,'FS','Parents getting divroced',5);
INSERT INTO socialdev VALUES (socialdevseq.NEXTVAL,'LI','Bullies other students',9);





--The code below creates the sequence for school services.
drop sequence sevicesseq;
CREATE SEQUENCE sevicesseq
START WITH 1
INCREMENT BY 1
NOCACHE;

--The table below creates the types of services offered.
INSERT INTO services VALUES (sevicesseq.NEXTVAL,'Speech');
INSERT INTO services VALUES (sevicesseq.NEXTVAL, 'English Language Learner');
INSERT INTO services  VALUES (sevicesseq.NEXTVAL, 'Title I');
INSERT INTO services VALUES (sevicesseq.NEXTVAL, 'Cognitive Disability');
INSERT INTO services VALUES (sevicesseq.NEXTVAL, 'Learning Disability');
INSERT INTO services VALUES (sevicesseq.NEXTVAL, 'Emotional/behavioral Disability');
INSERT INTO services VALUES (sevicesseq.NEXTVAL, 'Advanced Learning Services');

--The table below creates the services provided by schools.
INSERT INTO services_provided VALUES (10, 2);
INSERT INTO services_provided VALUES (10, 3);
INSERT INTO services_provided VALUES (10, 6);
INSERT INTO services_provided VALUES (10, 7);
INSERT INTO services_provided VALUES (11, 2);
INSERT INTO services_provided VALUES (11, 3);
INSERT INTO services_provided VALUES (11, 4);
INSERT INTO services_provided VALUES (11, 5);
INSERT INTO services_provided VALUES (11, 6);
INSERT INTO services_provided VALUES (11, 7);
INSERT INTO services_provided VALUES (12, 2);
INSERT INTO services_provided VALUES (12, 3);
INSERT INTO services_provided VALUES (12, 4);
INSERT INTO services_provided VALUES (12, 5);
INSERT INTO services_provided VALUES (12, 6);
INSERT INTO services_provided VALUES (12, 7);
INSERT INTO services_provided VALUES (13, 2);
INSERT INTO services_provided VALUES (13, 3);
INSERT INTO services_provided VALUES (13, 6);
INSERT INTO services_provided VALUES (13, 7);
INSERT INTO services_provided VALUES (13, 8);


--The table below creates the services used by each member.
INSERT INTO services_used VALUES (2, 2);
INSERT INTO services_used VALUES (2, 3);
INSERT INTO services_used VALUES (5, 5);
INSERT INTO services_used VALUES (6, 6);
INSERT INTO services_used VALUES (6, 7);
INSERT INTO services_used VALUES (9, 6);


--The table below creates allergry descriptions that members provide.
INSERT INTO allergy VALUES (2, 'tree nuts, peanuts');
INSERT INTO allergy VALUES (5, 'peanuts');
INSERT INTO allergy VALUES (9, 'pollen');

--the code below creates the sequence for Medication ID. 
CREATE SEQUENCE seqmedicationid
START WITH 1
INCREMENT BY 1
NOCACHE;

--The table below creates the medication ID
INSERT INTO medication VALUES (seqmedicationid.NEXTVAL, 'Sumatriptan');
INSERT INTO medication VALUES (seqmedicationid.NEXTVAL, 'Clonazepam');
INSERT INTO medication VALUES (seqmedicationid.NEXTVAL, 'Albuterol');
INSERT INTO medication VALUES (seqmedicationid.NEXTVAL, 'Adderall');
INSERT INTO medication VALUES (seqmedicationid.NEXTVAL, 'Zoloft');
INSERT INTO medication VALUES (seqmedicationid.NEXTVAL, 'Ziprasidone');
INSERT INTO medication VALUES (seqmedicationid.NEXTVAL, 'Warfarin');
INSERT INTO medication VALUES (seqmedicationid.NEXTVAL, 'Fosamax');
INSERT INTO medication VALUES (seqmedicationid.NEXTVAL, 'Analgesics');
INSERT INTO medication VALUES (seqmedicationid.NEXTVAL, 'Leukeran');
INSERT INTO medication VALUES (seqmedicationid.NEXTVAL, 'Celexa');
INSERT INTO medication VALUES (seqmedicationid.NEXTVAL, 'Metformin');
INSERT INTO medication VALUES (seqmedicationid.NEXTVAL, 'Tylenol');

--the code below creates the sequence for Medication ID. 
CREATE SEQUENCE seqhealthcondid
START WITH 1
INCREMENT BY 1
NOCACHE;

--The code below inserts the value statements for Health Condiiton
INSERT INTO healthcondition VALUES (seqhealthcondid.NEXTVAL, 'Anxiety');
INSERT INTO healthcondition VALUES (seqhealthcondid.NEXTVAL, 'Asthma');
INSERT INTO healthcondition VALUES (seqhealthcondid.NEXTVAL, 'Attention deficit hyperactive disorder');
INSERT INTO healthcondition VALUES (seqhealthcondid.NEXTVAL, 'Autism');
INSERT INTO healthcondition VALUES (seqhealthcondid.NEXTVAL, 'Bi-polar');
INSERT INTO healthcondition VALUES (seqhealthcondid.NEXTVAL, 'Bleeding disorder');
INSERT INTO healthcondition VALUES (seqhealthcondid.NEXTVAL, 'Bone condition');
INSERT INTO healthcondition VALUES (seqhealthcondid.NEXTVAL, 'Joint condition');
INSERT INTO healthcondition VALUES (seqhealthcondid.NEXTVAL, 'Cancer');
INSERT INTO healthcondition VALUES (seqhealthcondid.NEXTVAL, 'Depression');
INSERT INTO healthcondition VALUES (seqhealthcondid.NEXTVAL, 'Diabetes');
INSERT INTO healthcondition VALUES (seqhealthcondid.NEXTVAL, 'Ear infection');
INSERT INTO healthcondition VALUES (seqhealthcondid.NEXTVAL, 'Eating disorder');
INSERT INTO healthcondition VALUES (seqhealthcondid.NEXTVAL, 'Epilepsy');
INSERT INTO healthcondition VALUES (seqhealthcondid.NEXTVAL, 'Seizures');
INSERT INTO healthcondition VALUES (seqhealthcondid.NEXTVAL, 'Blackouts');
INSERT INTO healthcondition VALUES (seqhealthcondid.NEXTVAL, 'Gastrointestinal disorder');
INSERT INTO healthcondition VALUES (seqhealthcondid.NEXTVAL, 'Bowel disorder');
INSERT INTO healthcondition VALUES (seqhealthcondid.NEXTVAL, 'Migraines');
INSERT INTO healthcondition VALUES (seqhealthcondid.NEXTVAL, 'Headaches');
INSERT INTO healthcondition VALUES (seqhealthcondid.NEXTVAL, 'Hearing disability');
INSERT INTO healthcondition VALUES (seqhealthcondid.NEXTVAL, 'Heart disease');
INSERT INTO healthcondition VALUES (seqhealthcondid.NEXTVAL, 'Hepatitis');
INSERT INTO healthcondition VALUES (seqhealthcondid.NEXTVAL, 'High blood pressure');
INSERT INTO healthcondition VALUES (seqhealthcondid.NEXTVAL, 'Low blood pressure');
INSERT INTO healthcondition VALUES (seqhealthcondid.NEXTVAL, 'Kidney disease');
INSERT INTO healthcondition VALUES (seqhealthcondid.NEXTVAL, 'Mental problems');
INSERT INTO healthcondition VALUES (seqhealthcondid.NEXTVAL, 'Emotional problems');

--This table creates the member medical history.
INSERT INTO medical_history VALUES (2, '11-NOV-2017', 'Y', 'N');
INSERT INTO medical_history VALUES (3, '19-AUG-2017', 'Y', 'Y');
INSERT INTO medical_history VALUES (4, '08-JUL-2017', 'N', 'N');
INSERT INTO medical_history VALUES (5, '07-JAN-2018', 'Y', 'Y');
INSERT INTO medical_history VALUES (6, '24-MAY-2017', 'Y', 'N');
INSERT INTO medical_history VALUES (7, '29-SEP-2017', 'Y', 'N');
INSERT INTO medical_history VALUES (8, '01-NOV-2017', 'Y', 'Y');
INSERT INTO medical_history VALUES (9, '25-JAN-2017', 'Y', 'N');
INSERT INTO medical_history VALUES (10, '14-APR-2017', 'Y', 'N');
